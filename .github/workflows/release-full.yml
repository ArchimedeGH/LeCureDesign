      - name: Enforce root layout as dynamic (no prerender)
        run: |
          mkdir -p app
          cat > app/layout.tsx <<'TSX'
// SERVER root layout — globally disable prerender/caching
export const dynamic = 'force-dynamic'
export const prerender = false
export const revalidate = 0
export const fetchCache = 'force-no-store'

import type { Metadata } from 'next'
import './globals.css'

export const metadata: Metadata = {
  title: 'LeCureDesign — Scandinavian Kitchen Planner',
  description: 'Modeler • Solver • 3D • PDF',
}

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="it">
      <body style={{ margin: 0, fontFamily: 'ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial' }}>
        {children}
      </body>
    </html>
  )
}
TSX
          head -n 25 app/layout.tsx

      - name: Enforce /viewer server wrapper (no SSR/SSG)
        run: |
          mkdir -p app/viewer
          cat > app/viewer/page.tsx <<'TSX'
// SERVER file for /viewer — no prerender
export const dynamic = 'force-dynamic'
export const prerender = false
export const revalidate = 0
export const fetchCache = 'force-no-store'

import dynamic from 'next/dynamic'

// Load the client-only R3F canvas on the browser only
const ViewerCanvas = dynamic(() => import('./ViewerCanvas'), { ssr: false })

export default function ViewerPage() {
  return <ViewerCanvas />
}
TSX
          head -n 25 app/viewer/page.tsx
